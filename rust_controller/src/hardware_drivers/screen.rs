#[allow(unused)]
#[allow(dead_code)]
use msp432p401r_hal::serial::i2c::{
    self, i2ca::I2C_B0, i2ca::I2C_B1, i2ca::I2C_B2, i2ca::I2C_B3, Enabled,
};

// rust const array
const NUM_STR: [[u8; 16]; 95] = [
    [ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, ], //   0
    [ 0x00, 0x00, 0x00, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x33, 0x30, 0x00, 0x00, 0x00, ], // ! 1
    [ 0x00, 0x10, 0x0C, 0x06, 0x10, 0x0C, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, ], // " 2
    [ 0x40, 0xC0, 0x78, 0x40, 0xC0, 0x78, 0x40, 0x00, 0x04, 0x3F, 0x04, 0x04, 0x3F, 0x04, 0x04, 0x00, ], // # 3
    [ 0x00, 0x70, 0x88, 0xFC, 0x08, 0x30, 0x00, 0x00, 0x00, 0x18, 0x20, 0xFF, 0x21, 0x1E, 0x00, 0x00, ], // $ 4
    [ 0xF0, 0x08, 0xF0, 0x00, 0xE0, 0x18, 0x00, 0x00, 0x00, 0x21, 0x1C, 0x03, 0x1E, 0x21, 0x1E, 0x00, ], // % 5
    [ 0x00, 0xF0, 0x08, 0x88, 0x70, 0x00, 0x00, 0x00, 0x1E, 0x21, 0x23, 0x24, 0x19, 0x27, 0x21, 0x10, ], // & 6
    [ 0x10, 0x16, 0x0E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, ], // ' 7
    [ 0x00, 0x00, 0x00, 0xE0, 0x18, 0x04, 0x02, 0x00, 0x00, 0x00, 0x00, 0x07, 0x18, 0x20, 0x40, 0x00, ], // ( 8
    [ 0x00, 0x02, 0x04, 0x18, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x40, 0x20, 0x18, 0x07, 0x00, 0x00, 0x00, ], // ) 9
    [ 0x40, 0x40, 0x80, 0xF0, 0x80, 0x40, 0x40, 0x00, 0x02, 0x02, 0x01, 0x0F, 0x01, 0x02, 0x02, 0x00, ], // * 10
    [ 0x00, 0x00, 0x00, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x1F, 0x01, 0x01, 0x01, 0x00, ], // + 11
    [ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xB0, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, ], // , 12
    [ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, ], // - 13
    [ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, ], // . 14
    [ 0x00, 0x00, 0x00, 0x00, 0x80, 0x60, 0x18, 0x04, 0x00, 0x60, 0x18, 0x06, 0x01, 0x00, 0x00, 0x00, ], // / 15
    [ 0x00, 0xE0, 0x10, 0x08, 0x08, 0x10, 0xE0, 0x00, 0x00, 0x0F, 0x10, 0x20, 0x20, 0x10, 0x0F, 0x00, ], // 0 16
    [ 0x00, 0x10, 0x10, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x20, 0x3F, 0x20, 0x20, 0x00, 0x00, ], // 1 17
    [ 0x00, 0x70, 0x08, 0x08, 0x08, 0x88, 0x70, 0x00, 0x00, 0x30, 0x28, 0x24, 0x22, 0x21, 0x30, 0x00, ], // 2 18
    [ 0x00, 0x30, 0x08, 0x88, 0x88, 0x48, 0x30, 0x00, 0x00, 0x18, 0x20, 0x20, 0x20, 0x11, 0x0E, 0x00, ], // 3 19
    [ 0x00, 0x00, 0xC0, 0x20, 0x10, 0xF8, 0x00, 0x00, 0x00, 0x07, 0x04, 0x24, 0x24, 0x3F, 0x24, 0x00, ], // 4 20
    [ 0x00, 0xF8, 0x08, 0x88, 0x88, 0x08, 0x08, 0x00, 0x00, 0x19, 0x21, 0x20, 0x20, 0x11, 0x0E, 0x00, ], // 5 21
    [ 0x00, 0xE0, 0x10, 0x88, 0x88, 0x18, 0x00, 0x00, 0x00, 0x0F, 0x11, 0x20, 0x20, 0x11, 0x0E, 0x00, ], // 6 22
    [ 0x00, 0x38, 0x08, 0x08, 0xC8, 0x38, 0x08, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x00, 0x00, 0x00, 0x00, ], // 7 23
    [ 0x00, 0x70, 0x88, 0x08, 0x08, 0x88, 0x70, 0x00, 0x00, 0x1C, 0x22, 0x21, 0x21, 0x22, 0x1C, 0x00, ], // 8 24
    [ 0x00, 0xE0, 0x10, 0x08, 0x08, 0x10, 0xE0, 0x00, 0x00, 0x00, 0x31, 0x22, 0x22, 0x11, 0x0F, 0x00, ], // 9 25
    [ 0x00, 0x00, 0x00, 0xC0, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x30, 0x00, 0x00, 0x00, ], // : 26
    [ 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x60, 0x00, 0x00, 0x00, 0x00, ], // ; 27
    [ 0x00, 0x00, 0x80, 0x40, 0x20, 0x10, 0x08, 0x00, 0x00, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x00, ], // < 28
    [ 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x00, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x00, ], // = 29
    [ 0x00, 0x08, 0x10, 0x20, 0x40, 0x80, 0x00, 0x00, 0x00, 0x20, 0x10, 0x08, 0x04, 0x02, 0x01, 0x00, ], // > 30
    [ 0x00, 0x70, 0x48, 0x08, 0x08, 0x08, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x30, 0x36, 0x01, 0x00, 0x00, ], // ? 31
    [ 0xC0, 0x30, 0xC8, 0x28, 0xE8, 0x10, 0xE0, 0x00, 0x07, 0x18, 0x27, 0x24, 0x23, 0x14, 0x0B, 0x00, ], // @ 32
    [ 0x00, 0x00, 0xC0, 0x38, 0xE0, 0x00, 0x00, 0x00, 0x20, 0x3C, 0x23, 0x02, 0x02, 0x27, 0x38, 0x20, ], // A 33
    [ 0x08, 0xF8, 0x88, 0x88, 0x88, 0x70, 0x00, 0x00, 0x20, 0x3F, 0x20, 0x20, 0x20, 0x11, 0x0E, 0x00, ], // B 34
    [ 0xC0, 0x30, 0x08, 0x08, 0x08, 0x08, 0x38, 0x00, 0x07, 0x18, 0x20, 0x20, 0x20, 0x10, 0x08, 0x00, ], // C 35
    [ 0x08, 0xF8, 0x08, 0x08, 0x08, 0x10, 0xE0, 0x00, 0x20, 0x3F, 0x20, 0x20, 0x20, 0x10, 0x0F, 0x00, ], // D 36
    [ 0x08, 0xF8, 0x88, 0x88, 0xE8, 0x08, 0x10, 0x00, 0x20, 0x3F, 0x20, 0x20, 0x23, 0x20, 0x18, 0x00, ], // E 37
    [ 0x08, 0xF8, 0x88, 0x88, 0xE8, 0x08, 0x10, 0x00, 0x20, 0x3F, 0x20, 0x00, 0x03, 0x00, 0x00, 0x00, ], // F 38
    [ 0xC0, 0x30, 0x08, 0x08, 0x08, 0x38, 0x00, 0x00, 0x07, 0x18, 0x20, 0x20, 0x22, 0x1E, 0x02, 0x00, ], // G 39
    [ 0x08, 0xF8, 0x08, 0x00, 0x00, 0x08, 0xF8, 0x08, 0x20, 0x3F, 0x21, 0x01, 0x01, 0x21, 0x3F, 0x20, ], // H 40
    [ 0x00, 0x08, 0x08, 0xF8, 0x08, 0x08, 0x00, 0x00, 0x00, 0x20, 0x20, 0x3F, 0x20, 0x20, 0x00, 0x00, ], // I 41
    [ 0x00, 0x00, 0x08, 0x08, 0xF8, 0x08, 0x08, 0x00, 0xC0, 0x80, 0x80, 0x80, 0x7F, 0x00, 0x00, 0x00, ], // J 42
    [ 0x08, 0xF8, 0x88, 0xC0, 0x28, 0x18, 0x08, 0x00, 0x20, 0x3F, 0x20, 0x01, 0x26, 0x38, 0x20, 0x00, ], // K 43
    [ 0x08, 0xF8, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x3F, 0x20, 0x20, 0x20, 0x20, 0x30, 0x00, ], // L 44
    [ 0x08, 0xF8, 0xF8, 0x00, 0xF8, 0xF8, 0x08, 0x00, 0x20, 0x3F, 0x00, 0x3F, 0x00, 0x3F, 0x20, 0x00, ], // M 45
    [ 0x08, 0xF8, 0x30, 0xC0, 0x00, 0x08, 0xF8, 0x08, 0x20, 0x3F, 0x20, 0x00, 0x07, 0x18, 0x3F, 0x00, ], // N 46
    [ 0xE0, 0x10, 0x08, 0x08, 0x08, 0x10, 0xE0, 0x00, 0x0F, 0x10, 0x20, 0x20, 0x20, 0x10, 0x0F, 0x00, ], // O 47
    [ 0x08, 0xF8, 0x08, 0x08, 0x08, 0x08, 0xF0, 0x00, 0x20, 0x3F, 0x21, 0x01, 0x01, 0x01, 0x00, 0x00, ], // P 48
    [ 0xE0, 0x10, 0x08, 0x08, 0x08, 0x10, 0xE0, 0x00, 0x0F, 0x18, 0x24, 0x24, 0x38, 0x50, 0x4F, 0x00, ], // Q 49
    [ 0x08, 0xF8, 0x88, 0x88, 0x88, 0x88, 0x70, 0x00, 0x20, 0x3F, 0x20, 0x00, 0x03, 0x0C, 0x30, 0x20, ], // R 50
    [ 0x00, 0x70, 0x88, 0x08, 0x08, 0x08, 0x38, 0x00, 0x00, 0x38, 0x20, 0x21, 0x21, 0x22, 0x1C, 0x00, ], // S 51
    [ 0x18, 0x08, 0x08, 0xF8, 0x08, 0x08, 0x18, 0x00, 0x00, 0x00, 0x20, 0x3F, 0x20, 0x00, 0x00, 0x00, ], // T 52
    [ 0x08, 0xF8, 0x08, 0x00, 0x00, 0x08, 0xF8, 0x08, 0x00, 0x1F, 0x20, 0x20, 0x20, 0x20, 0x1F, 0x00, ], // U 53
    [ 0x08, 0x78, 0x88, 0x00, 0x00, 0xC8, 0x38, 0x08, 0x00, 0x00, 0x07, 0x38, 0x0E, 0x01, 0x00, 0x00, ], // V 54
    [ 0xF8, 0x08, 0x00, 0xF8, 0x00, 0x08, 0xF8, 0x00, 0x03, 0x3C, 0x07, 0x00, 0x07, 0x3C, 0x03, 0x00, ], // W 55
    [ 0x08, 0x18, 0x68, 0x80, 0x80, 0x68, 0x18, 0x08, 0x20, 0x30, 0x2C, 0x03, 0x03, 0x2C, 0x30, 0x20, ], // X 56
    [ 0x08, 0x38, 0xC8, 0x00, 0xC8, 0x38, 0x08, 0x00, 0x00, 0x00, 0x20, 0x3F, 0x20, 0x00, 0x00, 0x00, ], // Y 57
    [ 0x10, 0x08, 0x08, 0x08, 0xC8, 0x38, 0x08, 0x00, 0x20, 0x38, 0x26, 0x21, 0x20, 0x20, 0x18, 0x00, ], // Z 58
    [ 0x00, 0x00, 0x00, 0xFE, 0x02, 0x02, 0x02, 0x00, 0x00, 0x00, 0x00, 0x7F, 0x40, 0x40, 0x40, 0x00, ], // [ 59
    [ 0x00, 0x0C, 0x30, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x06, 0x38, 0xC0, 0x00, ], // \ 60
    [ 0x00, 0x02, 0x02, 0x02, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x40, 0x40, 0x40, 0x7F, 0x00, 0x00, 0x00, ], // ] 61
    [ 0x00, 0x00, 0x04, 0x02, 0x02, 0x02, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, ], // ^ 62
    [ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, ], // _ 63
    [ 0x00, 0x02, 0x02, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, ], // ` 64
    [ 0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x19, 0x24, 0x22, 0x22, 0x22, 0x3F, 0x20, ], // a 65
    [ 0x08, 0xF8, 0x00, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x11, 0x20, 0x20, 0x11, 0x0E, 0x00, ], // b 66
    [ 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x0E, 0x11, 0x20, 0x20, 0x20, 0x11, 0x00, ], // c 67
    [ 0x00, 0x00, 0x00, 0x80, 0x80, 0x88, 0xF8, 0x00, 0x00, 0x0E, 0x11, 0x20, 0x20, 0x10, 0x3F, 0x20, ], // d 68
    [ 0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x1F, 0x22, 0x22, 0x22, 0x22, 0x13, 0x00, ], // e 69
    [ 0x00, 0x80, 0x80, 0xF0, 0x88, 0x88, 0x88, 0x18, 0x00, 0x20, 0x20, 0x3F, 0x20, 0x20, 0x00, 0x00, ], // f 70
    [ 0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x6B, 0x94, 0x94, 0x94, 0x93, 0x60, 0x00, ], // g 71
    [ 0x08, 0xF8, 0x00, 0x80, 0x80, 0x80, 0x00, 0x00, 0x20, 0x3F, 0x21, 0x00, 0x00, 0x20, 0x3F, 0x20, ], // h 72
    [ 0x00, 0x80, 0x98, 0x98, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x20, 0x3F, 0x20, 0x20, 0x00, 0x00, ], // i 73
    [ 0x00, 0x00, 0x00, 0x80, 0x98, 0x98, 0x00, 0x00, 0x00, 0xC0, 0x80, 0x80, 0x80, 0x7F, 0x00, 0x00, ], // j 74
    [ 0x08, 0xF8, 0x00, 0x00, 0x80, 0x80, 0x80, 0x00, 0x20, 0x3F, 0x24, 0x02, 0x2D, 0x30, 0x20, 0x00, ], // k 75
    [ 0x00, 0x08, 0x08, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x20, 0x3F, 0x20, 0x20, 0x00, 0x00, ], // l 76
    [ 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x00, 0x20, 0x3F, 0x20, 0x00, 0x3F, 0x20, 0x00, 0x3F, ], // m 77
    [ 0x80, 0x80, 0x00, 0x80, 0x80, 0x80, 0x00, 0x00, 0x20, 0x3F, 0x21, 0x00, 0x00, 0x20, 0x3F, 0x20, ], // n 78
    [ 0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x1F, 0x20, 0x20, 0x20, 0x20, 0x1F, 0x00, ], // o 79
    [ 0x80, 0x80, 0x00, 0x80, 0x80, 0x00, 0x00, 0x00, 0x80, 0xFF, 0xA1, 0x20, 0x20, 0x11, 0x0E, 0x00, ], // p 80
    [ 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x0E, 0x11, 0x20, 0x20, 0xA0, 0xFF, 0x80, ], // q 81
    [ 0x80, 0x80, 0x80, 0x00, 0x80, 0x80, 0x80, 0x00, 0x20, 0x20, 0x3F, 0x21, 0x20, 0x00, 0x01, 0x00, ], // r 82
    [ 0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x33, 0x24, 0x24, 0x24, 0x24, 0x19, 0x00, ], // s 83
    [ 0x00, 0x80, 0x80, 0xE0, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F, 0x20, 0x20, 0x00, 0x00, ], // t 84
    [ 0x80, 0x80, 0x00, 0x00, 0x00, 0x80, 0x80, 0x00, 0x00, 0x1F, 0x20, 0x20, 0x20, 0x10, 0x3F, 0x20, ], // u 85
    [ 0x80, 0x80, 0x80, 0x00, 0x00, 0x80, 0x80, 0x80, 0x00, 0x01, 0x0E, 0x30, 0x08, 0x06, 0x01, 0x00, ], // v 86
    [ 0x80, 0x80, 0x00, 0x80, 0x00, 0x80, 0x80, 0x80, 0x0F, 0x30, 0x0C, 0x03, 0x0C, 0x30, 0x0F, 0x00, ], // w 87
    [ 0x00, 0x80, 0x80, 0x00, 0x80, 0x80, 0x80, 0x00, 0x00, 0x20, 0x31, 0x2E, 0x0E, 0x31, 0x20, 0x00, ], // x 88
    [ 0x80, 0x80, 0x80, 0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0x81, 0x8E, 0x70, 0x18, 0x06, 0x01, 0x00, ], // y 89
    [ 0x00, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x21, 0x30, 0x2C, 0x22, 0x21, 0x30, 0x00, ], // z 90
    [ 0x00, 0x00, 0x00, 0x00, 0x80, 0x7C, 0x02, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x40, 0x40, ], // { 91
    [ 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, ], // | 92
    [ 0x00, 0x02, 0x02, 0x7C, 0x80, 0x00, 0x00, 0x00, 0x00, 0x40, 0x40, 0x3F, 0x00, 0x00, 0x00, 0x00, ], // } 93
    [ 0x00, 0x06, 0x01, 0x01, 0x02, 0x02, 0x04, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, ], // ~ 94
];

trait Writable {
    fn write_bytes(&mut self, data: &[u8]);
}

macro_rules! impl_writable {
    ($eusci_bx:ty) => {
        impl Writable for $eusci_bx {
            fn write_bytes(&mut self, data: &[u8]) {
                <$eusci_bx>::write_bytes(self, data);
            }
        }
    };
}

impl_writable!(I2C_B0<Enabled>);
impl_writable!(I2C_B1<Enabled>);
impl_writable!(I2C_B2<Enabled>);
impl_writable!(I2C_B3<Enabled>);

pub struct Screen<T: Writable> {
    i2c: T,
    text_arr: [u8; 1024],
    graph_arr: [u8; 1024],
    text: [[u8; 16]; 4],
    text_index: usize,
    address: u16,
}

impl From<I2C_B0<Enabled>> for Screen<I2C_B0<Enabled>> {
    fn from(i2c: I2C_B0<Enabled>) -> Self {
        Screen {
            i2c,
            text_arr: [0; 1024],
            graph_arr: [0; 1024],
            text: [[0; 16]; 4],
            text_index: 0,
            address: 0x3C,
        }
        .init()
    }
}

macro_rules! impl_screen {
    ($i2c:ty) => {
        impl Screen<$i2c> {
            fn draw_1d_data(&mut self, camera_in_array: &[u16; 128]) {
                // clear graph array
                self.graph_arr.fill_with(|| 0);

                for (i, val) in camera_in_array.iter().enumerate() {
                    let mut px_height = 64 - (((val * 64) as usize) / (0x3FFF));
                    if px_height > 63 {
                        px_height = 63;
                    }
                    self.graph_arr[i + (128 * (px_height / 8))] |= 1 << (px_height & 7);
                }
            }

            pub fn clear_text_arr(&mut self) {
                self.text_arr.fill_with(|| 0);
            }

            fn send_command(&self, cmd: u8) {
                self.i2c.write_bytes(&[0x00, cmd]);
            }

            fn send_data(&self, data: &[u8; 1024]) {
                for &val in data {
                    // might be faster to make the slice first. Test it
                    self.i2c.write_bytes(&[0x40, val]);
                }
            }

            pub fn display_on(&self) {
                self.send_command(0xAF);
            }

            pub fn display_off(&self) {
                self.send_command(0xA5);
            }

            pub fn clear(&self) {
                let blank: [u8; 1024] = [0; 1024];
                self.send_data(&blank);
            }

            pub fn init(self) -> Self {
                self.send_command(0xAE); // Display off
                self.send_command(0xA8); // Set Multiplex Ratio
                self.send_command(0x3F);

                self.send_command(0xD3); // Set Display Offset
                self.send_command(0x00); // no Offset

                self.send_command(0x40); // Set display Start Line
                self.send_command(0xA1); // Set Segment Re-Map
                self.send_command(0xC8); // Set COM Output Scan Direction

                self.send_command(0xA6);
                self.send_command(0xD5);
                self.send_command(0x80);

                self.send_command(0xDA); // Set COM Pins Hardware Configuration
                self.send_command(0x12);

                self.send_command(0x81); // Set Contrast Control
                self.send_command(0x7F);

                self.send_command(0xA4); // Set Entire Display On/Off

                self.send_command(0xA6); // Set Normal/Inverse Display

                self.send_command(0xD9); // Set Pre-Charge Period
                self.send_command(0xF1); // Snternal

                self.send_command(0xDB); // Set VCOMH Deselect Level
                self.send_command(0x40);

                self.send_command(0xD5); // Set Display Clock Divide Ratio\Oscilator Frequency
                self.send_command(0x80); // the suggested ratio 0x80

                self.send_command(0x8D); // Set Charge Pump

                self.send_command(0x14); // Vcc internal

                self.send_command(0x00); // Set Lower Column Start Address

                self.send_command(0x10); // Set Higher Column Start Address

                self.send_command(0xB0); // Set Page Start Address for Page Addressing Mode

                // 00 - Horizontal Addressing Mode
                // 01 - Vertical Addressing Mode
                // 02 - Page Addressing Mode
                self.send_command(0x20); // Set Memory Addressing Mode
                self.send_command(0x00);

                self.send_command(0x21); // Set Column Address (only for horizontal or vertical mode)
                self.send_command(0x00);
                self.send_command(0x7F);

                self.send_command(0x22); // Set Page Address
                self.send_command(0x00);
                self.send_command(0x07);

                self.send_command(0x2E); // Deactivate Scroll
                self.display_off();
                self.clear();
                self.display_on();
                self
            }

            // TODO: implement error
            pub fn draw(&mut self, x: usize, y: usize, ascii: char) -> Result<(), ()> {
                // make sure x and y are in bounds
                // TODO: check bounds
                if x > 128 || y > 64 {
                    return Err(());
                }
                // make sure char is actually ascii
                if ascii.is_ascii() {
                    let ascii_index = (ascii as u8 - 32) as usize;
                    let a = &NUM_STR[ascii_index][0..8];
                    let b = &NUM_STR[ascii_index + 1][8..16];
                    let range1 = (x * 256 + y * 8)..(x * 256 + y * 8 + 8);
                    self.text_arr[range1].copy_from_slice(a);
                    let range2 = (x * 256 + y * 8 + 128)..(x * 256 + y * 8 + 128 + 8);
                    self.text_arr[range2].copy_from_slice(b);
                }
                Ok(())
            }

            pub fn draw_line(&mut self, x: usize, y: usize, string: &str) -> Result<(), ()> {
                for (i, c) in string.chars().enumerate() {
                    // TODO: figure out why we have to add to y...
                    self.draw(x, y + i, c)?;
                }
                Ok(())
            }

            /// Wrapper around draw_line that also updates the display
            pub fn print(&mut self, row: usize, col: usize, string: &str) {
                // ignore error if it occurs. Just stops writing the string characters
                let _ = self.draw_line(row, col, string);
                self.write_text();
            }

            pub fn print_line(&mut self, string: &str) {
                self.print(self.text_index, 1, string);
                self.text_index = (self.text_index + 1) % 4;
            }

            /// Update the display with the current graph data
            pub fn write_graph(&self) {
                self.send_data(&self.graph_arr);
            }

            /// Update the display with the current text data
            pub fn write_text(&self) {
                self.send_data(&self.text_arr);
            }

            pub fn display_camera_data(&mut self, camera_in_array: &[u16; 128]) {
                self.draw_1d_data(camera_in_array);
                self.write_graph();
            }
        }
    };
}

impl_screen!(I2C_B0<Enabled>);
impl_screen!(I2C_B1<Enabled>);
impl_screen!(I2C_B2<Enabled>);
impl_screen!(I2C_B3<Enabled>);
